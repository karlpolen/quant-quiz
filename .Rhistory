library(devtools)
install_github("https://github.com/karlp-asrs/asrsMethods/asrsMethods")
install.github("asrsMethods/asrsMethods","karlp-asrs")
install_github("asrsMethods/asrsMethods","karlp-asrs")
install_github("karlp-asrs/asrsMethods/asrsMethods")
library(asrsMethods)
?pestats
install_github("karlp-asrs/asrsMethods/asrsPalettes")
install_github("karlp-asrs/asrsMethods/asrsPalettes")
install_github("karlp-asrs/asrsMethods/asrsCode")
.libPaths()
isaa=c(.1182, .1696, .1911, .033, .0323, .1549, .0271, .0595, .1212, 0)
isaa*40251.9
4757-3862
isaa*39710
4693.7-3862
isaa
isaa*40251
6.3/10.5
data=rnorm(1000)
data=rnorm(1000)
mean(data)
data=rnorm(1000,.01,.04)
d=sample(data,12)
d
#what is estimate of mean
#approach 1
mean(data)*12
m=vector()
for(i in 1:1000) {
d=sample(data,12)
m[i]=sum(d)
}
length(m)
boxplot(m)
source('~/.active-rstudio-document')
2000^.333
20000
20000^.33
library(Rbbg)
v=c(1,2,3,4)
lag(v,1)
v/lag(v,1)
?lag
lag(v)
lag(v,2)
library(asrsPalettes)
IMD.palette()
display.palette(IMD.palette())
250e6*.02
250e6*.02/365
te=c(2,350,970,4,5,0,465,0,0,705,600)
tw=c(.125,.08,.115,.055,.055,.2,.065,.045,.075,.025,.16)
te%*%tw
library(lubridate)
library(xtable)
8.3+108.2+87.1+29.3+57.8
1.11^6
.6*6
.006*6
1.06^6
1.8704-.036-1.4185
.4159*.15
.4159-.062385
1.3535^(1/6)
.3535+1.4185
1.772^(1/6)
(1.1^1:10)-(1.08^1:10)
1.1^5
1.08^5
1.1^1:10
1.1^(1:10)
(1.1^(1:10))-(1.08^(1:10))
(1.1^(1:10))-(1.08^(1:10))+1
((1.1^(1:10))-(1.08^(1:10))+1)^(1/(1:10))-1
1.11^6
1.06^6
1.87-1.42
.15*.45
1.87-.07
1.8^(1/6)
.85*.11
1.0935^6
95/1094
(.95*.001)/((.95*.001)+(.1*.999))
8*5/2
40/3
(40/3)+(2/3*40/3)
13.33333+(2*13.33333/3)
8*5/3
40/3
1.14^(1:10)
gross=1.14^(1:10)
net=1.12^(1:10)
bench=1.08^(1:10)
fee=gross-net
excessreturn=net-bench
effectiveness=excessreturn/fee
effectiveness
exceswwsreturn
excessreturn
fee
grossprofit=gross-bench
fee/grossprofit
knitr::opts_chunk$set(echo = TRUE)
year=1:10
gross=1.14^year  #14% gross return compounded
net=1.12^year #12% net return compounded
bench=1.08^year #8% bench compounded
fee=gross-net
excessreturn=net-bench
effectiveness=excessreturn/fee
grossprofit=gross-bench
slicetogp=fee/grossprofit
df=data.frame(year,gross,net,bench,fee,effectiveness,slicetogp)
library(tidyr)
dflong=gather(df,eff,value)
dflong
dflong=gather(df,eff,value,gross:slicetogp)
dflong
dflong=gather(df[,c(year,effectiveness,slicetogp)],eff,value,effectiveness:slicetogp)
dflong=gather(df[,c("year","effectiveness","slicetogp")],eff,value,effectiveness:slicetogp)
dflong
ggplot(dflong,aes(x=year,y=value,group=eff,color=eff)) + geom_line()
library(ggplot2)
ggplot(dflong,aes(x=year,y=value,group=eff,color=eff)) + geom_line()
ggplot(df,aes(x=year,y=effectiveness) + geom_line()
ggplot(df,aes(x=year,y=effectiveness)) + geom_line()
knitr::opts_chunk$set(echo = TRUE)
slice_to_gp=sequence(.1,.9,.01)
help(sequence)
help(seq)
slice_to_gp=seq.1,.9,.01)
slice_to_gp=seq(.1,.9,.01)
head(slice_to_gp)
library(Deriv)
f=function(x) (x-1)/x
f2=Deriv(f)
f2
f2(3)
f=function(x) (1-x)/x
f2=Deriv(f)
f
f2
f3=Deriv(f2)
f3
Deriv(function(x) 1/x)
Deriv(function(x) (1-x)/x)
library(devtoools)
library(devtools)
install_github("karlp-asrs/asrsMethods/asrsMethods")
install.packages(c("callr", "caTools", "dplyr", "dtplyr", "ECOSolveR", "evaluate", "forcats", "formatR", "ggsignif", "ggthemes", "git2r", "gmp", "gtable", "haven", "highr", "httpuv", "jrvFinance", "kableExtra", "lazyeval", "modelr", "openssl", "pkgbuild", "polynom", "PortfolioOptim", "purrr", "quantmod", "R.utils", "R6", "Rblpapi", "Rcpp", "RCurl", "readxl", "registry", "rgl", "Rglpk", "rJava", "rlang", "rmarkdown", "Rmpfr", "robustbase", "ROI", "ROI.models.miplib", "ROI.models.netlib", "ROI.plugin.nloptr", "ROI.plugin.optimx", "ROI.plugin.scs", "rstudioapi", "scs", "slam", "stringi", "stringr", "tibble", "tidyr", "XML", "zoo"))
install.packages(c("rJava", "rlang"))
install.packages(c("rJava", "rlang"))
install.packages(c("rJava", "rlang"))
install.packages("rlang")
install.packages("rlang")
library(devtools)
install_github("karlp-asrs/asrsMethods/asrsMethods")
library(asrsMethods)
20000/33.33
25/.7
20/.6
14/33
setwd("C:/Users/KarlP/quant-quiz")
##  add indices to data file
data=read.csv('returns.csv')
data
str(dat)
str(data)
start=as.Date("2014-3-31")
end=as.Date("2019-3-31")
tickers=c("SPXT Index","LBUSTRUU Index","US0003M Index","BCOMTR Index")
field="PX"
install(Rbbg)
library(Rbbg)
Sys.setenv(JAVA_HOME='')
library(Rbbg)
conn=blpConnect()
bbgdat=bdh(conn,tickers,field,start_date=start,end_date=end,
option_names="periodicitySelection",option_values="MONTHLY")
x=blpDisconnect(conn)
library(tidyr)
bbgdat2=spread(bbgdat[,c(2,3,4)],ticker,PX)
head(bbgdat)
field="PX_LAST"
conn=blpConnect()
bbgdat=bdh(conn,tickers,field,start_date=start,end_date=end,
option_names="periodicitySelection",option_values="MONTHLY")
head(bbgdat)
x=blpDisconnect(conn)
library(tidyr)
bbgdat2=spread(bbgdat[,c(2,3,4)],ticker,PX_LAST)
bbgdat2=spread(bbgdat[,c(2,3)],ticker,PX_LAST)
help(spread)
bbgdat2=spread(bbgdat,ticker,PX_LAST)
head(bbgdat2)
tail(bbgdat2)
Commodities=bbgdat2[,"BCOMTR"]
Commodities=bbgdat2[,"BCOMTR Index"]
Commodities=exp(diff(log(Commodities)))
Commodities=bbgdat2[,"BCOMTR Index"]
Commodities=-1+exp(diff(log(Commodities)))
Commodities
Stocks=-1+exp(diff(log(bbgdat2[,"SPXT Index"])))
Bonds=-1+exp(diff(log(bbgdat2[,"LBUSTRUU Index"])))
dim(data)
length(Stocks)
Cash
Cash=bbgdat2[-1,"US0003M Index"]
Cash
Cash=bbgdat2[-1,"US0003M Index"]/1200
Cash
data=cbind(data,Cash,Stocks,Bonds,Commodities)
head(data)
write.csv(data,file="asset_returns.csv")
setwd("C:/Users/KarlP/quant-quiz")
data=read.csv("asset_returns.csv")
head(data)
data$Date=as.Date(data.Date,format="m/d/Y")
data$Date=as.Date(data$Date,format="m/d/Y")
data=data[,-1]
head(data)
data=read.csv("asset_returns.csv")
data$Date=as.Date(data$Date,format="m/d/Y")
data=data[,-1]
head(data)
help("as.Date")
data=read.csv("asset_returns.csv")
data$Date=as.Date(data$Date,format="%m/%d/%Y")
data=data[,-1]
head(data)
help(skew)
help(ACH)
help("acf")
data
setwd("C:/Users/KarlP/quant-quiz")
data=read.csv("asset_returns.csv")
data$Date=as.Date(data$Date,format="%m/%d/%Y")
data=data[,-1]
library(tidyr)
assets=data[,-1:-4]
library(tidyr)
mystery=data[,c("A","B","C")]
assetslong=gather(assets,"Asset_Class","Return")
head(mystery)
head(mysterylong)
mysterylong=gather(mystery,"Portfolio","Return")
assetslong=gather(assets,"Asset_Class","Return")
library(fBasics)
head(mysterlong)
mysterylong
mystery=data[,c("Date","A","B","C")]
assets=data[,-2:-4]
mysterylong=gather(mystery,"Portfolio","Return",-Date)
assetslong=gather(assets,"Asset_Class","Return",-Date)
head(mysterlong)
head(mysterylong)
head(assetslong)
knitr::opts_chunk$set(echo = TRUE)
data=read.csv("asset_returns.csv")
data$Date=as.Date(data$Date,format="%m/%d/%Y")
data=data[,-1]
library(tidyr)
mystery=data[,c("Date","A","B","C")]
assets=data[,-2:-4]
mysterylong=gather(mystery,"Portfolio","Return",-Date)
assetslong=gather(assets,"Asset_Class","Return",-Date)
library(fBasics)
library(ggplot2)
ggplot(mysterlong,aes(x=Return*100,fill=Portfolio))+geom_density
ggplot(mysterylong,aes(x=Return*100,fill=Portfolio))+geom_density
ggplot(mysterylong,aes(x=Return*100,fill=Portfolio))+geom_density()
ggplot(mysterylong,aes(x=Return*100,color=Portfolio))+geom_density()
covmat=cov(mystery[,-1])
icovmat=solve(covmat)
onevec=c(1,1,1)
minport=(icovmat%*%onevec)/(t(onevec)%*%icovmat%*%onevec)
icovmat
onevec
onevec=as.matrix(c(1,1,1))
onevec
minport=(icovmat%*%onevec)/(t(onevec)%*%icovmat%*%onevec)
minport=(icovmat%*%onevec)/((onevec)%*%icovmat%*%onevec)
onevec=(c(1,1,1))
minport=(icovmat%*%onevec)/((onevec)%*%icovmat%*%onevec)
icovmat%*%onevec
minport=(icovmat%*%onevec)/as.vector((onevec)%*%icovmat%*%onevec)
names(minport)=c("A","B","C")
minport
minport=(icovmat%*%onevec)/as.vector((onevec)%*%icovmat%*%onevec)
minport
icovmat
icovmat%*%onevec
rowSums(icovmat)
onevec%*%icovmat
onevec%*%icovmat%*%icovmat
sum(icovmat)
t(onevec)
onevec
as.matrix(onevec)
(onevec%*%icovmat)
(onevec%*%icovmat)%*%onevec
onevec%*%(icovmat%*%onevec)
onevec%*%icovmat%*%onevec
sum(onevec%*%icovmat)
t(minport)%*%covmat%*%minport
colnames(minport)="Weight"
minport
covmat%*%minport
t(minport)%*%covmat%*%minport
t(minport)%*%covmat%*%minport
minvol=as.vector(t(minport)%*%covmat%*%minport)
names(minvol)="Volatility"
minvol
ervec=apply(mystery[,-1],2,mean)
er=ervec%*%minport
er
names(er)="ExpReturn"
er
er=as.vector(ervec%*%minport)
names(er)="ExpReturn"
er
tanport=as.vector(icovmat%*%(ervec-mean(assets$Cash)))
tanport=tanport/sum(tanport)
names(tanport)=c("A","B","C")
tanport
ertan=tanport%*%ervec
ertan
tansd=tanport%*%covmat%*%tanport
tansd
tanport=as.vector(icovmat%*%(ervec-mean(assets$Cash)))
tanport=tanport/sum(tanport)
names(tanport)=c("A","B","C")
tanport
ertan=tanport%*%ervec
ertan
tansd=sqrt(tanport%*%covmat%*%tanport)
tansd
ertan
(1+ertan)^2-(tansd^2)
((1+ertan)^2-(tansd^2))^18
(1+ertan)^36
tansd*sqrt(36)
.9*1.3
1.1^2
.2^2
help("quantile")
help(qnorm)
dnorm(0,.234,.13)
pnorm(0,.234,.13)
qnorm(.05,.234,.13)
x=rnorm(1000,.234,.13)
sum(x>0)
((1+ertan)^2-(tansd^2))^6
tansd*sqrt(12)
pnorm(0,.073,.076)
pnorm(.073,.073,.076)
pnorm(0,ertan,tansd)
ertan
pnorm(0,ertan-.0006,tansd)
.0075/12
wmat=cbind(weq,tanport,minvol)
weq=c(1,1,1)/3
eqsd=sqrt(weq%*%covmat%*%weq)
eqer=weq%*%ervec
wmat=cbind(weq,tanport,minvol)
rownames(wmat)=c("A","B","C")
colnames(wmat)=c("Equal","Tangency","MinVar")
kable(wmat)
kableExra(wmat)
kableExtra(wmat)
kable(wmat)
help(kable)
library(knitr)
kable(wmat)
wmat=cbind(weq,tanport,minport)
rownames(wmat)=c("A","B","C")
kable(wmat)
colnames(wmat)=c("Equal","Tangency","MinVar")
kable(wmat)
kable(wmat,digits=2)
kable(wmat,digits=2,caption="Comparative Portfolio Weights")
colnames(wmat)=portnames=c("Equal","Tangency","MinVar")
ers=c(eqer,taner,ermin)*100
ers=c(eqer,ertan,ermin)*100
ers=c(eqer,ertan,miner)*100
ers=c(eqer,ertan,ermin)*100
ers=c(eqer,ertan,ermin)*100
ermin=as.vector(ervec%*%minport)
names(ermin)="ExpReturn"
ers=c(eqer,ertan,ermin)*100
sds=c(eqsd,tansd,minvol)*100
pval_1mo=c(pnorm(0,eqer,eqsd),pnorm(0,ertan,tansd),pnorm(0,ermin,minvol))
pval_1yr=c(
pnorm(0,-1+((1+eqer)^2-eqsd^2)^6,eqsd*sqrt(12)),
pnorm(0,-1+((1+taner)^2-tansd^2)^6,tansd*sqrt(12)),
pnorm(0,-1+((1+ermin)^2-minvol^2)^6,minvol*sqrt(12))
)
pval_1yr=c(
pnorm(0,-1+((1+eqer)^2-eqsd^2)^6,eqsd*sqrt(12)),
pnorm(0,-1+((1+ertan)^2-tansd^2)^6,tansd*sqrt(12)),
pnorm(0,-1+((1+ermin)^2-minvol^2)^6,minvol*sqrt(12))
)
pval_3yr=c(
pnorm(0,-1+((1+eqer)^2-eqsd^2)^18,eqsd*sqrt(36)),
pnorm(0,-1+((1+ertan)^2-tansd^2)^18,tansd*sqrt(36)),
pnorm(0,-1+((1+ermin)^2-minvol^2)^18,minvol*sqrt(36))
)
statmat=cbind(ers,sds,pval_1mo,pval_1yr,pval_3yr)
colnames(statmat)=c("Exp_Return","StdDev","Pval_1Mo","Pval_1Yr","Pval_3Yr")
rownames(statmat)=portnames
kable(statmat,digits=2)
minvol=as.vector(sqrt(t(minport)%*%covmat%*%minport))
names(minvol)="Volatility"
minvol
ers=c(eqer,ertan,ermin)*100
sds=c(eqsd,tansd,minvol)*100
pval_1mo=c(pnorm(0,eqer,eqsd),pnorm(0,ertan,tansd),pnorm(0,ermin,minvol))
pval_1yr=c(
pnorm(0,-1+((1+eqer)^2-eqsd^2)^6,eqsd*sqrt(12)),
pnorm(0,-1+((1+ertan)^2-tansd^2)^6,tansd*sqrt(12)),
pnorm(0,-1+((1+ermin)^2-minvol^2)^6,minvol*sqrt(12))
)
pval_3yr=c(
pnorm(0,-1+((1+eqer)^2-eqsd^2)^18,eqsd*sqrt(36)),
pnorm(0,-1+((1+ertan)^2-tansd^2)^18,tansd*sqrt(36)),
pnorm(0,-1+((1+ermin)^2-minvol^2)^18,minvol*sqrt(36))
)
statmat=cbind(ers,sds,pval_1mo,pval_1yr,pval_3yr)
colnames(statmat)=c("Exp_Return","StdDev","Pval_1Mo","Pval_1Yr","Pval_3Yr")
rownames(statmat)=portnames
kable(statmat,digits=2)
kable(wmat,digits=2)
sdvec=apply(mystery[,-1],2,sd)
ers=c(eqer,ertan,ermin,ervec)*100
sds=c(eqsd,tansd,minvol,sdvec)*100
pval_1mo=c(pnorm(0,eqer,eqsd),pnorm(0,ertan,tansd),pnorm(0,ermin,minvol),
pnorm(0,ervec[1],sdvec[1]),pnorm(0,ervec[2],sdvec[2]),
pnorm(0,ervec[3],sdvec[3]))
pval_1yr=c(
pnorm(0,-1+((1+eqer)^2-eqsd^2)^6,eqsd*sqrt(12)),
pnorm(0,-1+((1+ertan)^2-tansd^2)^6,tansd*sqrt(12)),
pnorm(0,-1+((1+ermin)^2-minvol^2)^6,minvol*sqrt(12)),
pnorm(0,-1+((1+ervec[1])^2-sdvec[1]^2)^6,sdvec[1]*sqrt(12)),
pnorm(0,-1+((1+ervec[2])^2-sdvec[2]^2)^6,sdvec[2]*sqrt(12)),
pnorm(0,-1+((1+ervec[3])^2-sdvec[3]^2)^6,sdvec[3]*sqrt(12))
)
pval_3yr=c(
pnorm(0,-1+((1+eqer)^2-eqsd^2)^18,eqsd*sqrt(36)),
pnorm(0,-1+((1+ertan)^2-tansd^2)^18,tansd*sqrt(36)),
pnorm(0,-1+((1+ermin)^2-minvol^2)^18,minvol*sqrt(36)),
pnorm(0,-1+((1+ervec[1])^2-sdvec[1]^2)^18,sdvec[1]*sqrt(36)),
pnorm(0,-1+((1+ervec[2])^2-sdvec[2]^2)^18,sdvec[2]*sqrt(36)),
pnorm(0,-1+((1+ervec[3])^2-sdvec[3]^2)^18,sdvec[3]*sqrt(36))
)
statmat=cbind(ers,sds,pval_1mo,pval_1yr,pval_3yr)
colnames(statmat)=c("Exp_Return","StdDev","Pval_1Mo","Pval_1Yr","Pval_3Yr")
rownames(statmat)=c(portnames,"A","B","C")
kable(statmat,digits=2)
sample(3,1:10)
sample(1:10,3)
sample(1:10,5)
sample(1:10,6,replace=T)
mystery$eq=(mystery$A+mystery$B+mystery$C)/3
mo1=sum(myster$eq>0)/60
mo1=sum(mystery$eq>0)/60
yr1vec=vector()
yr3vec=vector()
for (i in 1:1000) {
s1=mystery$eq[sample(1:60,12,replace=TRUE)]
s1ret=-1+prod(1+s1)
yr1vec[i]=0<s1ret
s3=myster$eq[sample(1:60,36,replace=TRUE)]
s3ret=-1+prod(1+s3)
yr3vec[i]=0<s3ret
}
yr1vec=vector()
yr3vec=vector()
for (i in 1:1000) {
s1=mystery$eq[sample(1:60,12,replace=TRUE)]
s1ret=-1+prod(1+s1)
yr1vec[i]=0<s1ret
s3=mystery$eq[sample(1:60,36,replace=TRUE)]
s3ret=-1+prod(1+s3)
yr3vec[i]=0<s3ret
}
yr1=sum(yr1vec)/1000
yr3=sum(yr3vec)/1000
ans=c(mo1,yr1,yr3)
names(ans)=c("Pval_1Mo","Pval_1Yr","Pval_3Yr")
ans
mystery$eq=(mystery$A+mystery$B+mystery$C)/3
mo1=sum(mystery$eq<0)/60
yr1vec=vector()
yr3vec=vector()
for (i in 1:1000) {
s1=mystery$eq[sample(1:60,12,replace=TRUE)]
s1ret=-1+prod(1+s1)
yr1vec[i]=0>s1ret
s3=mystery$eq[sample(1:60,36,replace=TRUE)]
s3ret=-1+prod(1+s3)
yr3vec[i]=0>s3ret
}
yr1=sum(yr1vec)/1000
yr3=sum(yr3vec)/1000
ans=c(mo1,yr1,yr3)
names(ans)=c("Pval_1Mo","Pval_1Yr","Pval_3Yr")
ans
round(ans,2)
mysterylong=gather(mystery,"Portfolio","Return",-Date)
ggplot(mysterylong,aes(x=Return*100,color=Portfolio))+geom_density()
